{"version":3,"file":"static/js/309.61a86bc7.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.jsx","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/errorBondary/ErrorBondary.jsx","components/charSearchForm/CharSearchForm.jsx","components/pages/MainPage.jsx","services/MarvelService.jsx","hooks/http.hook.jsx"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n\t)\n}\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources-img/mjolnir.png';\n\nconst RandomChar = () => {\n\t\n\tconst [char, setChar] = useState(null);\n\n\tconst {loading, error, getCharacter, clearError} =  useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t\tconst timerId = setInterval(updateChar, 60000);\n\t\n\t\treturn () => {\n\t\t\tclearInterval(timerId)\n\t\t}\n\t}, [])\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\t\tgetCharacter(id)\n\t\t\t.then(onCharLoaded);\n\t}\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading ? <Spinner/> : null;\n\tconst content = !(loading || error || !char) ? <View char={char} /> : null;\n\n\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!<br/>\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tOr choose another one\n\t\t\t\t</p>\n\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst View = ({char}) => {\n\tconst {name, description, thumbnail, homepage, wiki} = char;\n\tlet imgStyle = {'objectFit' : 'cover'};\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = {'objectFit' : 'contain'};\n\t}\n\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">\n\t\t\t\t\t{description}\n\t\t\t\t</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setnewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(210);\n\tconst [charEnded, setCharEnded] = useState(false);\n\t\n\tconst {loading, error, getAllCharacters} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, [])\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setnewItemLoading(false) : setnewItemLoading(true);\n\t\tgetAllCharacters(offset)\n\t\t\t.then(onCharListLoaded)\n\t}\n\n\tconst onCharListLoaded = async(newCharList) => {\n\t\tlet ended = false;\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true;\n\t\t}\n\t\tsetCharList([...charList, ...newCharList]);\n\t\tsetnewItemLoading(false);\n\t\tsetOffset(offset + 9);\n\t\tsetCharEnded(ended);\n\t}\n\n\tconst itemRefs = useRef([]);\n\n\tconst focusOnItem = (id) => {\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t\titemRefs.current[id].focus();\n\t}\n\n\tfunction renderItems (arr){\n\t\tconst items =  arr.map((item, i) => {\n\t\t\tlet imgStyle = {'objectFit' : 'cover'};\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\timgStyle = {'objectFit' : 'unset'};\n\t\t\t}\n\t\t\t\n\t\t\treturn (\n\t\t\t\t<CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n\t\t\t\t\t<li \n\t\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\tref={el => itemRefs.current[i] = el}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\tif (e.key === ' ' || e.key === \"Enter\") {\n\t\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n\t\t\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t\t</li>\n\t\t\t\t</CSSTransition>\n\t\t\t)\n\t\t});\n\n\t\treturn (\n\t\t\t<ul className=\"char__grid\">\n\t\t\t\t<TransitionGroup component={null}>\n\t\t\t\t\t{items}\n\t\t\t\t</TransitionGroup>\n\t\t\t</ul>\n\t\t)\n\t}\n\t\n\tconst items = renderItems(charList);\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{items}\n\t\t\t<button \n\t\t\t\tdisabled={newItemLoading} \n\t\t\t\tstyle={{'display' : charEnded ? 'none' : 'block'}}\n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tonClick={() => onRequest(offset)}>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n\treturn (\n\t\t<>\n\t\t\t<p className=\"char__select\">Please select a character to see information</p>\n\t\t\t<div className=\"skeleton\">\n\t\t\t\t<div className=\"pulse skeleton__header\">\n\t\t\t\t\t<div className=\"pulse skeleton__circle\"></div>\n\t\t\t\t\t<div className=\"pulse skeleton__mini\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pulse skeleton__block\"></div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n\tconst [char, setChar] = useState(null);\n\n\tconst {loading, error, getCharacter,  clearError} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t}, [props.charId])\n\n\tconst updateChar = () => {\n\t\tconst {charId} = props;\n\t\tif (!charId) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tclearError();\n\t\t\n\t\tgetCharacter(charId)\n\t\t\t.then(onCharLoaded);\t\t\t\n\t}\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst skeleton = char || loading || error ? null : <Skeleton/>;\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading ? <Spinner/> : null;\n\tconst content = !(loading || error || !char) ? <View char={char}/> : null;\n\n\treturn (\n\t\t<div className=\"char__info\">\n\t\t\t{skeleton}\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t</div>\n\t)\n\n}\n\nconst View = ({char}) => {\n\tconst {name, description, thumbnail, homepage, wiki, comics} = char;\n\n\tlet imgStyle = {'objectFit' : 'cover'};\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = {'objectFit' : 'contain'};\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"char__basics\">\n\t\t\t\t<img src={thumbnail} alt={name} style={imgStyle}/>\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\n\t\t\t\t\t<div className=\"char__btns\">\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"char__descr\">\n\t\t\t\t{description}\n\t\t\t</div>\n\t\t\t<div className=\"char__comics\">Comics:</div>\n\t\t\t<ul className=\"char__comics-list\">\n\t\t\t\t{comics.length > 0 ? null : 'There is no comics with this character'}\n\t\t\t\t{\n\t\t\t\t\tcomics.map((item, i) => {\n\t\t\t\t\t\tif (i > 9) return;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={i} className=\"char__comics-item\">\n\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}                \n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n\tstate = {\n\t\terror: false\n\t}\n\n\tcomponentDidCatch(error, errorInfo) {\n\t\tconsole.log(error, errorInfo);\n\t\tthis.setState({\n\t\t\terror: true\n\t\t})\n\t}\n\n\trender() {\n\t\tif (this.state.error) {\n\t\t\treturn <ErrorMessage/>\n\t\t}\n\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n\tconst [char, setChar] = useState(null);\n\tconst {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst updateChar = (name) => {\n\t\tclearError();\n\n\t\tgetCharacterByName(name)\n\t\t\t.then(onCharLoaded);\n\t}\n\n\tconst errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div>: null;\n\tconst results = !char ? null : char.length > 0 ?\n\t\t\t\t\t<div className=\"char__search-wrapper\">\n\t\t\t\t\t\t<div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n\t\t\t\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">To page</div>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div> : \n\t\t\t\t\t<div className=\"char__search-error\">\n\t\t\t\t\t\tThe character was not found. Check the name and try again\n\t\t\t\t\t</div>;\n\n\treturn (\n\t\t<div className=\"char__search-form\">\n\t\t\t<Formik\n\t\t\t\tinitialValues = {{\n\t\t\t\t\tcharName: ''\n\t\t\t\t}}\n\t\t\t\tvalidationSchema = {Yup.object({\n\t\t\t\t\tcharName: Yup.string().required('This field is required')\n\t\t\t\t})}\n\t\t\t\tonSubmit = { ({charName}) => {\n\t\t\t\t\tupdateChar(charName);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Form>\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n\t\t\t\t\t<div className=\"char__search-wrapper\">\n\t\t\t\t\t\t<Field \n\t\t\t\t\t\t\tid=\"charName\" \n\t\t\t\t\t\t\tname='charName' \n\t\t\t\t\t\t\ttype='text' \n\t\t\t\t\t\t\tplaceholder=\"Enter name\"/>\n\t\t\t\t\t\t<button \n\t\t\t\t\t\t\ttype='submit' \n\t\t\t\t\t\t\tclassName=\"button button__main\"\n\t\t\t\t\t\t\tdisabled={loading}>\n\t\t\t\t\t\t\t<div className=\"inner\">find</div>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n\t\t\t\t</Form>\n\t\t\t</Formik>\n\t\t\t{results}\n\t\t\t{errorMessage}\n\t\t</div>\n\t)\n}\n\nexport default CharSearchForm;","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBondary/ErrorBondary\";\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\n\nimport decoration from '../../resources-img/vision.png';\n\nconst MainPage = () => {\n\n\tconst [selectedChar, setChar] = useState(null);\n\n\tconst onCharSelected = (id) => {\n\t\tsetChar(id);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<RandomChar/>\n\t\t\t</ErrorBoundary>\n\t\t\t<div className=\"char__content\">\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CharList onCharSelected={onCharSelected}/>\n\t\t\t\t</ErrorBoundary>\n\t\t\t\t<div>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CharInfo charId={selectedChar}/>\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CharSearchForm/>\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n\t\t</>\n\t)\n}\n\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n\t\n\tconst {loading, request, error, clearError} = useHttp();\n// для работы с API marvel service\t\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n\tconst _apiKey = 'apikey=c35d61692fb992dcf21b1578980b0dd8';\n\tconst _hash = 'hash=03df19b5e0a49caaa13b46ee14dd7988';\n\tconst _baseOffset = 210;\n// получить всех персонажей\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&ts=1&${_apiKey}&${_hash}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n// найти персонажа\t\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&ts=1&${_apiKey}&${_hash}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n//получить персонажей\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?ts=1&${_apiKey}&${_hash}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t}\n// вывести все комикы\t\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&ts=1&${_apiKey}&${_hash}`);\n\t\treturn res.data.results.map(_transformComics);\n\t}\n// вывести комикс\t\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?ts=1&${_apiKey}&${_hash}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t}\n// информация о персонажахв\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items\n\t\t}\n\t}\n// информация о комиксах\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || 'There is no description',\n\t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\n\t\t\tprice: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n\t\t}\n\t}\n\t\n\treturn {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n\t\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\t\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\t\t\n\t\tsetLoading(true);\n\t\t\n\t\ttry {\n\t\t\tconst response = await fetch(url, {method, body, headers});\n\t\t\t\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\n\t\t\t}\n\t\t\t\n\t\t\tconst data = await response.json();\n\t\t\t\n\t\t\tsetLoading(false);\n\t\t\treturn data;\n\t\t} catch(e) {\n\t\t\tsetLoading(false);\n\t\t\tsetError(e.message);\n\t\t\tthrow e;\n\t\t}\n\t}, [])\n\t\n\tconst clearError = useCallback(()  => setError(null), []);\n\t\n\treturn {loading, request, error, clearError}\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_hash","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}