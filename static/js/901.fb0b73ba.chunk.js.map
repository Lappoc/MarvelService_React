{"version":3,"file":"static/js/901.fb0b73ba.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.jsx","components/errorMessage/ErrorMessage.jsx","components/pages/SingleComicPage.jsx","services/MarvelService.jsx","hooks/http.hook.jsx"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources-img/Avengers.png';\nimport avengersLogo from '../../resources-img/Avengers_logo.png';\n\nconst AppBanner = () => {\n\treturn (\n\t\t<div className=\"app__banner\">\n\t\t\t<img src={avengers} alt=\"Avengers\"/>\n\t\t\t<div className=\"app__banner-text\">\n\t\t\t\tNew comics every week!<br/>\n\t\t\t\tStay tuned!\n\t\t\t</div>\n\t\t\t<img src={avengersLogo} alt=\"Avengers logo\"/>\n\t\t</div>\n\t)\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n\t)\n}\n\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst SinglePage = ({Component, dataType}) => {\n\t\tconst {id} = useParams();\n\t\tconst [data, setData] = useState(null);\n\t\tconst {loading, error, getComic, getCharacter, clearError} = useMarvelService();\n\n\t\tuseEffect(() => {\n\t\t\tupdateData()\n\t\t}, [id])\n\n\t\tconst updateData = () => {\n\t\t\tclearError();\n\n\t\t\tswitch (dataType) {\n\t\t\t\tcase 'comic':\n\t\t\t\t\tgetComic(id).then(onDataLoaded);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'character':\n\t\t\t\t\tgetCharacter(id).then(onDataLoaded);\n\t\t\t}\n\t\t}\n\n\t\tconst onDataLoaded = (data) => {\n\t\t\tsetData(data);\n\t\t}\n\n\t\tconst errorMessage = error ? <ErrorMessage/> : null;\n\t\tconst spinner = loading ? <Spinner/> : null;\n\t\tconst content = !(loading || error || !data) ? <Component data={data}/> : null;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<AppBanner/>\n\t\t\t\t{errorMessage}\n\t\t\t\t{spinner}\n\t\t\t\t{content}\n\t\t\t</>\n\t\t)\n}\n\nexport default SinglePage;\n","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n\t\n\tconst {loading, request, error, clearError} = useHttp();\n// для работы с API marvel service\t\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n\tconst _apiKey = 'apikey=c35d61692fb992dcf21b1578980b0dd8';\n\tconst _hash = 'hash=03df19b5e0a49caaa13b46ee14dd7988';\n\tconst _baseOffset = 210;\n// получить всех персонажей\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&ts=1&${_apiKey}&${_hash}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n// найти персонажа\t\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&ts=1&${_apiKey}&${_hash}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n//получить персонажей\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?ts=1&${_apiKey}&${_hash}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t}\n// вывести все комикы\t\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&ts=1&${_apiKey}&${_hash}`);\n\t\treturn res.data.results.map(_transformComics);\n\t}\n// вывести комикс\t\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?ts=1&${_apiKey}&${_hash}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t}\n// информация о персонажахв\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items\n\t\t}\n\t}\n// информация о комиксах\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || 'There is no description',\n\t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\n\t\t\tprice: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n\t\t}\n\t}\n\t\n\treturn {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n\t\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\t\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\t\t\n\t\tsetLoading(true);\n\t\t\n\t\ttry {\n\t\t\tconst response = await fetch(url, {method, body, headers});\n\t\t\t\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\n\t\t\t}\n\t\t\t\n\t\t\tconst data = await response.json();\n\t\t\t\n\t\t\tsetLoading(false);\n\t\t\treturn data;\n\t\t} catch(e) {\n\t\t\tsetLoading(false);\n\t\t\tsetError(e.message);\n\t\t\tthrow e;\n\t\t}\n\t}, [])\n\t\n\tconst clearError = useCallback(()  => setError(null), []);\n\t\n\treturn {loading, request, error, clearError}\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","Component","dataType","id","useParams","useState","data","setData","useMarvelService","loading","error","getComic","getCharacter","clearError","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","_hash","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getAllComics","_transformComics","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}